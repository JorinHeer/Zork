package ch.bbw.na;/** * Class Game - the main class of the "Zork" game. * * Author:  Michael Kolling * Version: 1.1 * Date:    March 2000 *  *  This class is the main class of the "Zork" application. Zork is a very *  simple, text based adventure game.  Users can walk around some scenery. *  That's all. It should really be extended to make it more interesting! *  *  To play this game, create an instance of this class and call the "play" *  routine. *  *  This main class creates and initialises all the others: it creates all *  rooms, creates the parser and starts the game.  It also evaluates the *  commands that the parser returns. */class Game {		private Parser parser;	private Room currentRoom;	/**	 * Create the game and initialise its internal map.	 */	public Game() {		createRooms();		parser = new Parser();	}	/**	 * Create all the rooms and link their exits together.	 */	private void createRooms() {		Room lobby, nordstadt, mansion, guardian, china, shop, firegod, castle;		// create the rooms		lobby = new Room("the Main-Lobby of the Game");		nordstadt = new Room("the Great City Nordstadt");		mansion = new Room("the great Mansion of Tyler1");		guardian = new Room("the Temple of the mighty Northguardian");		china = new Room("the Country of Chinaman69");		shop = new Room("the worst shop of China");		firegod = new Room("the Hall of Doom. You approach the holy Firegod...");		castle = new Room("in a haunted castle");		// initialise room exits		lobby.setExits(nordstadt, china, null, null);		nordstadt.setExits(guardian, castle, lobby, mansion);		mansion.setExits(null, nordstadt, null, null);		guardian.setExits(null, null, nordstadt, null);		china.setExits(castle, firegod, shop, lobby);		shop.setExits(china, null, null, null);		firegod.setExits(null, null, null, china);		castle.setExits(null, null, china, nordstadt);		currentRoom = lobby; // start game lobby	}	/**	 *  Main play routine.  Loops until end of play.	 */	public void play() {		printWelcome();		// Enter the main command loop.  Here we repeatedly read commands and		// execute them until the game is over.		boolean finished = false;		while (!finished) {			Command command = parser.getCommand();			finished = processCommand(command);		}		System.out.println("Thank you for playing.  Good bye.");	}	/**	 * Print out the opening message for the player.	 */	private void printWelcome() {		System.out.println();		System.out.println("Welcome to Zork!");		System.out.println("Zork is a simple adventure game.");		System.out.println("Type 'help' if you need help.");		System.out.println();		System.out.println(currentRoom.longDescription());	}	/**	 * Given a command, process (that is: execute) the command.	 * If this command ends the game, true is returned, otherwise false is	 * returned.	 */	private boolean processCommand(Command command) {		if (command.isUnknown()) {			System.out.println("I don't know what you mean...");			return false;		}		String commandWord = command.getCommandWord();		if (commandWord.equals("help")) {			printHelp();		} else if (commandWord.equals("attack")) {			//if(currentRoom = )			printAttack();		}else if (commandWord.equals("run")) {		}else if (commandWord.equals("go")) {			goRoom(command);		} else if (commandWord.equals("quit")) {			if (command.hasSecondWord()) {				System.out.println("Quit what?");			} else {				return true; // signal that we want to quit			}		}		return false;	}	/*	 * implementations of user commands:	 */ 	/**	 * Print out some help information.	 * Here we print some stupid, cryptic message and a list of the 	 * command words.	 */	private void printHelp() {		System.out.println("You are lost. You are alone. You wander");		System.out.println("A mysterious voice speaks up..");		System.out.println();		System.out.println("Your command words are:");		System.out.println(parser.showCommands());	}	private void printAttack() {		System.out.println("You don't have a weapon");	}	private void back() {		System.out.println("You run away!");	}	/** 	 * Try to go to one direction. If there is an exit, enter the new	 * room, otherwise print an error message.	 */	private void goRoom(Command command) {		// if there is no second word, we don't know where to go...		if (!command.hasSecondWord()) {			System.out.println("Go where?");		} else {						String direction = command.getSecondWord();				// Try to leave current room.			Room nextRoom = currentRoom.nextRoom(direction);				if (nextRoom == null)				System.out.println("There is no door!");			else {				currentRoom = nextRoom;				System.out.println(currentRoom.longDescription());			}		}	}}